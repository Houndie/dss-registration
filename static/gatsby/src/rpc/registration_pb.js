/* eslint-disable */
// source: registration.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var discount_pb = require('./discount_pb.js');
goog.object.extend(proto, discount_pb);
goog.exportSymbol('proto.dss.DanceOnlyPass', null, global);
goog.exportSymbol('proto.dss.FullWeekendPass', null, global);
goog.exportSymbol('proto.dss.FullWeekendPassLevel', null, global);
goog.exportSymbol('proto.dss.FullWeekendPassTier', null, global);
goog.exportSymbol('proto.dss.MixAndMatch', null, global);
goog.exportSymbol('proto.dss.MixAndMatch.Role', null, global);
goog.exportSymbol('proto.dss.NoHousing', null, global);
goog.exportSymbol('proto.dss.NoPass', null, global);
goog.exportSymbol('proto.dss.ProvideHousing', null, global);
goog.exportSymbol('proto.dss.RegistrationAddReq', null, global);
goog.exportSymbol('proto.dss.RegistrationAddRes', null, global);
goog.exportSymbol('proto.dss.RegistrationGetReq', null, global);
goog.exportSymbol('proto.dss.RegistrationGetRes', null, global);
goog.exportSymbol('proto.dss.RegistrationGetSummaryReq', null, global);
goog.exportSymbol('proto.dss.RegistrationGetSummaryRes', null, global);
goog.exportSymbol('proto.dss.RegistrationInfo', null, global);
goog.exportSymbol('proto.dss.RegistrationInfo.HousingCase', null, global);
goog.exportSymbol('proto.dss.RegistrationInfo.PassTypeCase', null, global);
goog.exportSymbol('proto.dss.RegistrationPricesReq', null, global);
goog.exportSymbol('proto.dss.RegistrationPricesRes', null, global);
goog.exportSymbol('proto.dss.RegistrationSummary', null, global);
goog.exportSymbol('proto.dss.RegistrationUpdateReq', null, global);
goog.exportSymbol('proto.dss.RegistrationUpdateRes', null, global);
goog.exportSymbol('proto.dss.RequireHousing', null, global);
goog.exportSymbol('proto.dss.SoloJazz', null, global);
goog.exportSymbol('proto.dss.TShirt', null, global);
goog.exportSymbol('proto.dss.TShirt.Style', null, global);
goog.exportSymbol('proto.dss.TeamCompetition', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dss.RegistrationInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.dss.RegistrationInfo.repeatedFields_, proto.dss.RegistrationInfo.oneofGroups_);
};
goog.inherits(proto.dss.RegistrationInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dss.RegistrationInfo.displayName = 'proto.dss.RegistrationInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dss.FullWeekendPass = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dss.FullWeekendPass, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dss.FullWeekendPass.displayName = 'proto.dss.FullWeekendPass';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dss.DanceOnlyPass = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dss.DanceOnlyPass, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dss.DanceOnlyPass.displayName = 'proto.dss.DanceOnlyPass';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dss.NoPass = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dss.NoPass, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dss.NoPass.displayName = 'proto.dss.NoPass';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dss.MixAndMatch = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dss.MixAndMatch, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dss.MixAndMatch.displayName = 'proto.dss.MixAndMatch';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dss.SoloJazz = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dss.SoloJazz, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dss.SoloJazz.displayName = 'proto.dss.SoloJazz';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dss.TeamCompetition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dss.TeamCompetition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dss.TeamCompetition.displayName = 'proto.dss.TeamCompetition';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dss.TShirt = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dss.TShirt, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dss.TShirt.displayName = 'proto.dss.TShirt';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dss.ProvideHousing = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dss.ProvideHousing, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dss.ProvideHousing.displayName = 'proto.dss.ProvideHousing';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dss.RequireHousing = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dss.RequireHousing, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dss.RequireHousing.displayName = 'proto.dss.RequireHousing';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dss.NoHousing = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dss.NoHousing, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dss.NoHousing.displayName = 'proto.dss.NoHousing';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dss.RegistrationAddReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dss.RegistrationAddReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dss.RegistrationAddReq.displayName = 'proto.dss.RegistrationAddReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dss.RegistrationAddRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dss.RegistrationAddRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dss.RegistrationAddRes.displayName = 'proto.dss.RegistrationAddRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dss.RegistrationGetReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dss.RegistrationGetReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dss.RegistrationGetReq.displayName = 'proto.dss.RegistrationGetReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dss.RegistrationGetRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dss.RegistrationGetRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dss.RegistrationGetRes.displayName = 'proto.dss.RegistrationGetRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dss.RegistrationPricesReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dss.RegistrationPricesReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dss.RegistrationPricesReq.displayName = 'proto.dss.RegistrationPricesReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dss.RegistrationPricesRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dss.RegistrationPricesRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dss.RegistrationPricesRes.displayName = 'proto.dss.RegistrationPricesRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dss.RegistrationUpdateReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dss.RegistrationUpdateReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dss.RegistrationUpdateReq.displayName = 'proto.dss.RegistrationUpdateReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dss.RegistrationUpdateRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dss.RegistrationUpdateRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dss.RegistrationUpdateRes.displayName = 'proto.dss.RegistrationUpdateRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dss.RegistrationGetSummaryReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dss.RegistrationGetSummaryReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dss.RegistrationGetSummaryReq.displayName = 'proto.dss.RegistrationGetSummaryReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dss.RegistrationSummary = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dss.RegistrationSummary, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dss.RegistrationSummary.displayName = 'proto.dss.RegistrationSummary';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dss.RegistrationGetSummaryRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.dss.RegistrationGetSummaryRes.repeatedFields_, null);
};
goog.inherits(proto.dss.RegistrationGetSummaryRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dss.RegistrationGetSummaryRes.displayName = 'proto.dss.RegistrationGetSummaryRes';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.dss.RegistrationInfo.repeatedFields_ = [21];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.dss.RegistrationInfo.oneofGroups_ = [[11,12,13],[18,19,20]];

/**
 * @enum {number}
 */
proto.dss.RegistrationInfo.PassTypeCase = {
  PASS_TYPE_NOT_SET: 0,
  FULL_WEEKEND_PASS: 11,
  DANCE_ONLY_PASS: 12,
  NO_PASS: 13
};

/**
 * @return {proto.dss.RegistrationInfo.PassTypeCase}
 */
proto.dss.RegistrationInfo.prototype.getPassTypeCase = function() {
  return /** @type {proto.dss.RegistrationInfo.PassTypeCase} */(jspb.Message.computeOneofCase(this, proto.dss.RegistrationInfo.oneofGroups_[0]));
};

/**
 * @enum {number}
 */
proto.dss.RegistrationInfo.HousingCase = {
  HOUSING_NOT_SET: 0,
  PROVIDE_HOUSING: 18,
  REQUIRE_HOUSING: 19,
  NO_HOUSING: 20
};

/**
 * @return {proto.dss.RegistrationInfo.HousingCase}
 */
proto.dss.RegistrationInfo.prototype.getHousingCase = function() {
  return /** @type {proto.dss.RegistrationInfo.HousingCase} */(jspb.Message.computeOneofCase(this, proto.dss.RegistrationInfo.oneofGroups_[1]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dss.RegistrationInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.dss.RegistrationInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dss.RegistrationInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dss.RegistrationInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    firstName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    lastName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    streetAddress: jspb.Message.getFieldWithDefault(msg, 4, ""),
    city: jspb.Message.getFieldWithDefault(msg, 5, ""),
    state: jspb.Message.getFieldWithDefault(msg, 6, ""),
    zipCode: jspb.Message.getFieldWithDefault(msg, 7, ""),
    email: jspb.Message.getFieldWithDefault(msg, 8, ""),
    homeScene: jspb.Message.getFieldWithDefault(msg, 9, ""),
    isStudent: jspb.Message.getBooleanFieldWithDefault(msg, 10, false),
    fullWeekendPass: (f = msg.getFullWeekendPass()) && proto.dss.FullWeekendPass.toObject(includeInstance, f),
    danceOnlyPass: (f = msg.getDanceOnlyPass()) && proto.dss.DanceOnlyPass.toObject(includeInstance, f),
    noPass: (f = msg.getNoPass()) && proto.dss.NoPass.toObject(includeInstance, f),
    mixAndMatch: (f = msg.getMixAndMatch()) && proto.dss.MixAndMatch.toObject(includeInstance, f),
    soloJazz: (f = msg.getSoloJazz()) && proto.dss.SoloJazz.toObject(includeInstance, f),
    teamCompetition: (f = msg.getTeamCompetition()) && proto.dss.TeamCompetition.toObject(includeInstance, f),
    tshirt: (f = msg.getTshirt()) && proto.dss.TShirt.toObject(includeInstance, f),
    provideHousing: (f = msg.getProvideHousing()) && proto.dss.ProvideHousing.toObject(includeInstance, f),
    requireHousing: (f = msg.getRequireHousing()) && proto.dss.RequireHousing.toObject(includeInstance, f),
    noHousing: (f = msg.getNoHousing()) && proto.dss.NoHousing.toObject(includeInstance, f),
    discountCodesList: (f = jspb.Message.getRepeatedField(msg, 21)) == null ? undefined : f,
    createdAt: jspb.Message.getFieldWithDefault(msg, 22, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dss.RegistrationInfo}
 */
proto.dss.RegistrationInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dss.RegistrationInfo;
  return proto.dss.RegistrationInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dss.RegistrationInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dss.RegistrationInfo}
 */
proto.dss.RegistrationInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFirstName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setStreetAddress(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCity(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setState(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setZipCode(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setHomeScene(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsStudent(value);
      break;
    case 11:
      var value = new proto.dss.FullWeekendPass;
      reader.readMessage(value,proto.dss.FullWeekendPass.deserializeBinaryFromReader);
      msg.setFullWeekendPass(value);
      break;
    case 12:
      var value = new proto.dss.DanceOnlyPass;
      reader.readMessage(value,proto.dss.DanceOnlyPass.deserializeBinaryFromReader);
      msg.setDanceOnlyPass(value);
      break;
    case 13:
      var value = new proto.dss.NoPass;
      reader.readMessage(value,proto.dss.NoPass.deserializeBinaryFromReader);
      msg.setNoPass(value);
      break;
    case 14:
      var value = new proto.dss.MixAndMatch;
      reader.readMessage(value,proto.dss.MixAndMatch.deserializeBinaryFromReader);
      msg.setMixAndMatch(value);
      break;
    case 15:
      var value = new proto.dss.SoloJazz;
      reader.readMessage(value,proto.dss.SoloJazz.deserializeBinaryFromReader);
      msg.setSoloJazz(value);
      break;
    case 16:
      var value = new proto.dss.TeamCompetition;
      reader.readMessage(value,proto.dss.TeamCompetition.deserializeBinaryFromReader);
      msg.setTeamCompetition(value);
      break;
    case 17:
      var value = new proto.dss.TShirt;
      reader.readMessage(value,proto.dss.TShirt.deserializeBinaryFromReader);
      msg.setTshirt(value);
      break;
    case 18:
      var value = new proto.dss.ProvideHousing;
      reader.readMessage(value,proto.dss.ProvideHousing.deserializeBinaryFromReader);
      msg.setProvideHousing(value);
      break;
    case 19:
      var value = new proto.dss.RequireHousing;
      reader.readMessage(value,proto.dss.RequireHousing.deserializeBinaryFromReader);
      msg.setRequireHousing(value);
      break;
    case 20:
      var value = new proto.dss.NoHousing;
      reader.readMessage(value,proto.dss.NoHousing.deserializeBinaryFromReader);
      msg.setNoHousing(value);
      break;
    case 21:
      var value = /** @type {string} */ (reader.readString());
      msg.addDiscountCodes(value);
      break;
    case 22:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreatedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dss.RegistrationInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dss.RegistrationInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dss.RegistrationInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dss.RegistrationInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFirstName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLastName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getStreetAddress();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCity();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getState();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getZipCode();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getHomeScene();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getIsStudent();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getFullWeekendPass();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.dss.FullWeekendPass.serializeBinaryToWriter
    );
  }
  f = message.getDanceOnlyPass();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.dss.DanceOnlyPass.serializeBinaryToWriter
    );
  }
  f = message.getNoPass();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.dss.NoPass.serializeBinaryToWriter
    );
  }
  f = message.getMixAndMatch();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.dss.MixAndMatch.serializeBinaryToWriter
    );
  }
  f = message.getSoloJazz();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.dss.SoloJazz.serializeBinaryToWriter
    );
  }
  f = message.getTeamCompetition();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.dss.TeamCompetition.serializeBinaryToWriter
    );
  }
  f = message.getTshirt();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.dss.TShirt.serializeBinaryToWriter
    );
  }
  f = message.getProvideHousing();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto.dss.ProvideHousing.serializeBinaryToWriter
    );
  }
  f = message.getRequireHousing();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      proto.dss.RequireHousing.serializeBinaryToWriter
    );
  }
  f = message.getNoHousing();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.dss.NoHousing.serializeBinaryToWriter
    );
  }
  f = message.getDiscountCodesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      21,
      f
    );
  }
  f = message.getCreatedAt();
  if (f.length > 0) {
    writer.writeString(
      22,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.dss.RegistrationInfo.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.dss.RegistrationInfo} returns this
 */
proto.dss.RegistrationInfo.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string first_name = 2;
 * @return {string}
 */
proto.dss.RegistrationInfo.prototype.getFirstName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.dss.RegistrationInfo} returns this
 */
proto.dss.RegistrationInfo.prototype.setFirstName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string last_name = 3;
 * @return {string}
 */
proto.dss.RegistrationInfo.prototype.getLastName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.dss.RegistrationInfo} returns this
 */
proto.dss.RegistrationInfo.prototype.setLastName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string street_address = 4;
 * @return {string}
 */
proto.dss.RegistrationInfo.prototype.getStreetAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.dss.RegistrationInfo} returns this
 */
proto.dss.RegistrationInfo.prototype.setStreetAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string city = 5;
 * @return {string}
 */
proto.dss.RegistrationInfo.prototype.getCity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.dss.RegistrationInfo} returns this
 */
proto.dss.RegistrationInfo.prototype.setCity = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string state = 6;
 * @return {string}
 */
proto.dss.RegistrationInfo.prototype.getState = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.dss.RegistrationInfo} returns this
 */
proto.dss.RegistrationInfo.prototype.setState = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string zip_code = 7;
 * @return {string}
 */
proto.dss.RegistrationInfo.prototype.getZipCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.dss.RegistrationInfo} returns this
 */
proto.dss.RegistrationInfo.prototype.setZipCode = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string email = 8;
 * @return {string}
 */
proto.dss.RegistrationInfo.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.dss.RegistrationInfo} returns this
 */
proto.dss.RegistrationInfo.prototype.setEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string home_scene = 9;
 * @return {string}
 */
proto.dss.RegistrationInfo.prototype.getHomeScene = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.dss.RegistrationInfo} returns this
 */
proto.dss.RegistrationInfo.prototype.setHomeScene = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional bool is_student = 10;
 * @return {boolean}
 */
proto.dss.RegistrationInfo.prototype.getIsStudent = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.dss.RegistrationInfo} returns this
 */
proto.dss.RegistrationInfo.prototype.setIsStudent = function(value) {
  return jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * optional FullWeekendPass full_weekend_pass = 11;
 * @return {?proto.dss.FullWeekendPass}
 */
proto.dss.RegistrationInfo.prototype.getFullWeekendPass = function() {
  return /** @type{?proto.dss.FullWeekendPass} */ (
    jspb.Message.getWrapperField(this, proto.dss.FullWeekendPass, 11));
};


/**
 * @param {?proto.dss.FullWeekendPass|undefined} value
 * @return {!proto.dss.RegistrationInfo} returns this
*/
proto.dss.RegistrationInfo.prototype.setFullWeekendPass = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.dss.RegistrationInfo.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dss.RegistrationInfo} returns this
 */
proto.dss.RegistrationInfo.prototype.clearFullWeekendPass = function() {
  return this.setFullWeekendPass(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dss.RegistrationInfo.prototype.hasFullWeekendPass = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional DanceOnlyPass dance_only_pass = 12;
 * @return {?proto.dss.DanceOnlyPass}
 */
proto.dss.RegistrationInfo.prototype.getDanceOnlyPass = function() {
  return /** @type{?proto.dss.DanceOnlyPass} */ (
    jspb.Message.getWrapperField(this, proto.dss.DanceOnlyPass, 12));
};


/**
 * @param {?proto.dss.DanceOnlyPass|undefined} value
 * @return {!proto.dss.RegistrationInfo} returns this
*/
proto.dss.RegistrationInfo.prototype.setDanceOnlyPass = function(value) {
  return jspb.Message.setOneofWrapperField(this, 12, proto.dss.RegistrationInfo.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dss.RegistrationInfo} returns this
 */
proto.dss.RegistrationInfo.prototype.clearDanceOnlyPass = function() {
  return this.setDanceOnlyPass(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dss.RegistrationInfo.prototype.hasDanceOnlyPass = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional NoPass no_pass = 13;
 * @return {?proto.dss.NoPass}
 */
proto.dss.RegistrationInfo.prototype.getNoPass = function() {
  return /** @type{?proto.dss.NoPass} */ (
    jspb.Message.getWrapperField(this, proto.dss.NoPass, 13));
};


/**
 * @param {?proto.dss.NoPass|undefined} value
 * @return {!proto.dss.RegistrationInfo} returns this
*/
proto.dss.RegistrationInfo.prototype.setNoPass = function(value) {
  return jspb.Message.setOneofWrapperField(this, 13, proto.dss.RegistrationInfo.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dss.RegistrationInfo} returns this
 */
proto.dss.RegistrationInfo.prototype.clearNoPass = function() {
  return this.setNoPass(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dss.RegistrationInfo.prototype.hasNoPass = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional MixAndMatch mix_and_match = 14;
 * @return {?proto.dss.MixAndMatch}
 */
proto.dss.RegistrationInfo.prototype.getMixAndMatch = function() {
  return /** @type{?proto.dss.MixAndMatch} */ (
    jspb.Message.getWrapperField(this, proto.dss.MixAndMatch, 14));
};


/**
 * @param {?proto.dss.MixAndMatch|undefined} value
 * @return {!proto.dss.RegistrationInfo} returns this
*/
proto.dss.RegistrationInfo.prototype.setMixAndMatch = function(value) {
  return jspb.Message.setWrapperField(this, 14, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dss.RegistrationInfo} returns this
 */
proto.dss.RegistrationInfo.prototype.clearMixAndMatch = function() {
  return this.setMixAndMatch(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dss.RegistrationInfo.prototype.hasMixAndMatch = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional SoloJazz solo_jazz = 15;
 * @return {?proto.dss.SoloJazz}
 */
proto.dss.RegistrationInfo.prototype.getSoloJazz = function() {
  return /** @type{?proto.dss.SoloJazz} */ (
    jspb.Message.getWrapperField(this, proto.dss.SoloJazz, 15));
};


/**
 * @param {?proto.dss.SoloJazz|undefined} value
 * @return {!proto.dss.RegistrationInfo} returns this
*/
proto.dss.RegistrationInfo.prototype.setSoloJazz = function(value) {
  return jspb.Message.setWrapperField(this, 15, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dss.RegistrationInfo} returns this
 */
proto.dss.RegistrationInfo.prototype.clearSoloJazz = function() {
  return this.setSoloJazz(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dss.RegistrationInfo.prototype.hasSoloJazz = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional TeamCompetition team_competition = 16;
 * @return {?proto.dss.TeamCompetition}
 */
proto.dss.RegistrationInfo.prototype.getTeamCompetition = function() {
  return /** @type{?proto.dss.TeamCompetition} */ (
    jspb.Message.getWrapperField(this, proto.dss.TeamCompetition, 16));
};


/**
 * @param {?proto.dss.TeamCompetition|undefined} value
 * @return {!proto.dss.RegistrationInfo} returns this
*/
proto.dss.RegistrationInfo.prototype.setTeamCompetition = function(value) {
  return jspb.Message.setWrapperField(this, 16, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dss.RegistrationInfo} returns this
 */
proto.dss.RegistrationInfo.prototype.clearTeamCompetition = function() {
  return this.setTeamCompetition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dss.RegistrationInfo.prototype.hasTeamCompetition = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional TShirt tshirt = 17;
 * @return {?proto.dss.TShirt}
 */
proto.dss.RegistrationInfo.prototype.getTshirt = function() {
  return /** @type{?proto.dss.TShirt} */ (
    jspb.Message.getWrapperField(this, proto.dss.TShirt, 17));
};


/**
 * @param {?proto.dss.TShirt|undefined} value
 * @return {!proto.dss.RegistrationInfo} returns this
*/
proto.dss.RegistrationInfo.prototype.setTshirt = function(value) {
  return jspb.Message.setWrapperField(this, 17, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dss.RegistrationInfo} returns this
 */
proto.dss.RegistrationInfo.prototype.clearTshirt = function() {
  return this.setTshirt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dss.RegistrationInfo.prototype.hasTshirt = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional ProvideHousing provide_housing = 18;
 * @return {?proto.dss.ProvideHousing}
 */
proto.dss.RegistrationInfo.prototype.getProvideHousing = function() {
  return /** @type{?proto.dss.ProvideHousing} */ (
    jspb.Message.getWrapperField(this, proto.dss.ProvideHousing, 18));
};


/**
 * @param {?proto.dss.ProvideHousing|undefined} value
 * @return {!proto.dss.RegistrationInfo} returns this
*/
proto.dss.RegistrationInfo.prototype.setProvideHousing = function(value) {
  return jspb.Message.setOneofWrapperField(this, 18, proto.dss.RegistrationInfo.oneofGroups_[1], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dss.RegistrationInfo} returns this
 */
proto.dss.RegistrationInfo.prototype.clearProvideHousing = function() {
  return this.setProvideHousing(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dss.RegistrationInfo.prototype.hasProvideHousing = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional RequireHousing require_housing = 19;
 * @return {?proto.dss.RequireHousing}
 */
proto.dss.RegistrationInfo.prototype.getRequireHousing = function() {
  return /** @type{?proto.dss.RequireHousing} */ (
    jspb.Message.getWrapperField(this, proto.dss.RequireHousing, 19));
};


/**
 * @param {?proto.dss.RequireHousing|undefined} value
 * @return {!proto.dss.RegistrationInfo} returns this
*/
proto.dss.RegistrationInfo.prototype.setRequireHousing = function(value) {
  return jspb.Message.setOneofWrapperField(this, 19, proto.dss.RegistrationInfo.oneofGroups_[1], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dss.RegistrationInfo} returns this
 */
proto.dss.RegistrationInfo.prototype.clearRequireHousing = function() {
  return this.setRequireHousing(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dss.RegistrationInfo.prototype.hasRequireHousing = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional NoHousing no_housing = 20;
 * @return {?proto.dss.NoHousing}
 */
proto.dss.RegistrationInfo.prototype.getNoHousing = function() {
  return /** @type{?proto.dss.NoHousing} */ (
    jspb.Message.getWrapperField(this, proto.dss.NoHousing, 20));
};


/**
 * @param {?proto.dss.NoHousing|undefined} value
 * @return {!proto.dss.RegistrationInfo} returns this
*/
proto.dss.RegistrationInfo.prototype.setNoHousing = function(value) {
  return jspb.Message.setOneofWrapperField(this, 20, proto.dss.RegistrationInfo.oneofGroups_[1], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dss.RegistrationInfo} returns this
 */
proto.dss.RegistrationInfo.prototype.clearNoHousing = function() {
  return this.setNoHousing(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dss.RegistrationInfo.prototype.hasNoHousing = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * repeated string discount_codes = 21;
 * @return {!Array<string>}
 */
proto.dss.RegistrationInfo.prototype.getDiscountCodesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 21));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.dss.RegistrationInfo} returns this
 */
proto.dss.RegistrationInfo.prototype.setDiscountCodesList = function(value) {
  return jspb.Message.setField(this, 21, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.dss.RegistrationInfo} returns this
 */
proto.dss.RegistrationInfo.prototype.addDiscountCodes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 21, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.dss.RegistrationInfo} returns this
 */
proto.dss.RegistrationInfo.prototype.clearDiscountCodesList = function() {
  return this.setDiscountCodesList([]);
};


/**
 * optional string created_at = 22;
 * @return {string}
 */
proto.dss.RegistrationInfo.prototype.getCreatedAt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 22, ""));
};


/**
 * @param {string} value
 * @return {!proto.dss.RegistrationInfo} returns this
 */
proto.dss.RegistrationInfo.prototype.setCreatedAt = function(value) {
  return jspb.Message.setProto3StringField(this, 22, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dss.FullWeekendPass.prototype.toObject = function(opt_includeInstance) {
  return proto.dss.FullWeekendPass.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dss.FullWeekendPass} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dss.FullWeekendPass.toObject = function(includeInstance, msg) {
  var f, obj = {
    tier: jspb.Message.getFieldWithDefault(msg, 1, 0),
    level: jspb.Message.getFieldWithDefault(msg, 2, 0),
    paid: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dss.FullWeekendPass}
 */
proto.dss.FullWeekendPass.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dss.FullWeekendPass;
  return proto.dss.FullWeekendPass.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dss.FullWeekendPass} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dss.FullWeekendPass}
 */
proto.dss.FullWeekendPass.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.dss.FullWeekendPassTier} */ (reader.readEnum());
      msg.setTier(value);
      break;
    case 2:
      var value = /** @type {!proto.dss.FullWeekendPassLevel} */ (reader.readEnum());
      msg.setLevel(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPaid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dss.FullWeekendPass.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dss.FullWeekendPass.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dss.FullWeekendPass} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dss.FullWeekendPass.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTier();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getLevel();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getPaid();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional FullWeekendPassTier tier = 1;
 * @return {!proto.dss.FullWeekendPassTier}
 */
proto.dss.FullWeekendPass.prototype.getTier = function() {
  return /** @type {!proto.dss.FullWeekendPassTier} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.dss.FullWeekendPassTier} value
 * @return {!proto.dss.FullWeekendPass} returns this
 */
proto.dss.FullWeekendPass.prototype.setTier = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional FullWeekendPassLevel level = 2;
 * @return {!proto.dss.FullWeekendPassLevel}
 */
proto.dss.FullWeekendPass.prototype.getLevel = function() {
  return /** @type {!proto.dss.FullWeekendPassLevel} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.dss.FullWeekendPassLevel} value
 * @return {!proto.dss.FullWeekendPass} returns this
 */
proto.dss.FullWeekendPass.prototype.setLevel = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional bool paid = 3;
 * @return {boolean}
 */
proto.dss.FullWeekendPass.prototype.getPaid = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.dss.FullWeekendPass} returns this
 */
proto.dss.FullWeekendPass.prototype.setPaid = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dss.DanceOnlyPass.prototype.toObject = function(opt_includeInstance) {
  return proto.dss.DanceOnlyPass.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dss.DanceOnlyPass} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dss.DanceOnlyPass.toObject = function(includeInstance, msg) {
  var f, obj = {
    paid: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dss.DanceOnlyPass}
 */
proto.dss.DanceOnlyPass.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dss.DanceOnlyPass;
  return proto.dss.DanceOnlyPass.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dss.DanceOnlyPass} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dss.DanceOnlyPass}
 */
proto.dss.DanceOnlyPass.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPaid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dss.DanceOnlyPass.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dss.DanceOnlyPass.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dss.DanceOnlyPass} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dss.DanceOnlyPass.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPaid();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool paid = 1;
 * @return {boolean}
 */
proto.dss.DanceOnlyPass.prototype.getPaid = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.dss.DanceOnlyPass} returns this
 */
proto.dss.DanceOnlyPass.prototype.setPaid = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dss.NoPass.prototype.toObject = function(opt_includeInstance) {
  return proto.dss.NoPass.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dss.NoPass} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dss.NoPass.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dss.NoPass}
 */
proto.dss.NoPass.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dss.NoPass;
  return proto.dss.NoPass.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dss.NoPass} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dss.NoPass}
 */
proto.dss.NoPass.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dss.NoPass.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dss.NoPass.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dss.NoPass} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dss.NoPass.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dss.MixAndMatch.prototype.toObject = function(opt_includeInstance) {
  return proto.dss.MixAndMatch.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dss.MixAndMatch} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dss.MixAndMatch.toObject = function(includeInstance, msg) {
  var f, obj = {
    role: jspb.Message.getFieldWithDefault(msg, 1, 0),
    paid: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dss.MixAndMatch}
 */
proto.dss.MixAndMatch.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dss.MixAndMatch;
  return proto.dss.MixAndMatch.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dss.MixAndMatch} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dss.MixAndMatch}
 */
proto.dss.MixAndMatch.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.dss.MixAndMatch.Role} */ (reader.readEnum());
      msg.setRole(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPaid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dss.MixAndMatch.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dss.MixAndMatch.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dss.MixAndMatch} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dss.MixAndMatch.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRole();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getPaid();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.dss.MixAndMatch.Role = {
  FOLLOWER: 0,
  LEADER: 1
};

/**
 * optional Role role = 1;
 * @return {!proto.dss.MixAndMatch.Role}
 */
proto.dss.MixAndMatch.prototype.getRole = function() {
  return /** @type {!proto.dss.MixAndMatch.Role} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.dss.MixAndMatch.Role} value
 * @return {!proto.dss.MixAndMatch} returns this
 */
proto.dss.MixAndMatch.prototype.setRole = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bool paid = 2;
 * @return {boolean}
 */
proto.dss.MixAndMatch.prototype.getPaid = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.dss.MixAndMatch} returns this
 */
proto.dss.MixAndMatch.prototype.setPaid = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dss.SoloJazz.prototype.toObject = function(opt_includeInstance) {
  return proto.dss.SoloJazz.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dss.SoloJazz} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dss.SoloJazz.toObject = function(includeInstance, msg) {
  var f, obj = {
    paid: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dss.SoloJazz}
 */
proto.dss.SoloJazz.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dss.SoloJazz;
  return proto.dss.SoloJazz.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dss.SoloJazz} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dss.SoloJazz}
 */
proto.dss.SoloJazz.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPaid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dss.SoloJazz.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dss.SoloJazz.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dss.SoloJazz} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dss.SoloJazz.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPaid();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool paid = 1;
 * @return {boolean}
 */
proto.dss.SoloJazz.prototype.getPaid = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.dss.SoloJazz} returns this
 */
proto.dss.SoloJazz.prototype.setPaid = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dss.TeamCompetition.prototype.toObject = function(opt_includeInstance) {
  return proto.dss.TeamCompetition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dss.TeamCompetition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dss.TeamCompetition.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    paid: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dss.TeamCompetition}
 */
proto.dss.TeamCompetition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dss.TeamCompetition;
  return proto.dss.TeamCompetition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dss.TeamCompetition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dss.TeamCompetition}
 */
proto.dss.TeamCompetition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPaid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dss.TeamCompetition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dss.TeamCompetition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dss.TeamCompetition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dss.TeamCompetition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPaid();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.dss.TeamCompetition.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.dss.TeamCompetition} returns this
 */
proto.dss.TeamCompetition.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool paid = 2;
 * @return {boolean}
 */
proto.dss.TeamCompetition.prototype.getPaid = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.dss.TeamCompetition} returns this
 */
proto.dss.TeamCompetition.prototype.setPaid = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dss.TShirt.prototype.toObject = function(opt_includeInstance) {
  return proto.dss.TShirt.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dss.TShirt} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dss.TShirt.toObject = function(includeInstance, msg) {
  var f, obj = {
    style: jspb.Message.getFieldWithDefault(msg, 1, 0),
    paid: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dss.TShirt}
 */
proto.dss.TShirt.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dss.TShirt;
  return proto.dss.TShirt.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dss.TShirt} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dss.TShirt}
 */
proto.dss.TShirt.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.dss.TShirt.Style} */ (reader.readEnum());
      msg.setStyle(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPaid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dss.TShirt.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dss.TShirt.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dss.TShirt} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dss.TShirt.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStyle();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getPaid();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.dss.TShirt.Style = {
  UNISEXS: 0,
  UNISEXM: 1,
  UNISEXL: 2,
  UNISEXXL: 3,
  UNISEX2XL: 4,
  UNISEX3XL: 5,
  BELLAS: 6,
  BELLAM: 7,
  BELLAL: 8,
  BELLAXL: 9,
  BELLA2XL: 10
};

/**
 * optional Style style = 1;
 * @return {!proto.dss.TShirt.Style}
 */
proto.dss.TShirt.prototype.getStyle = function() {
  return /** @type {!proto.dss.TShirt.Style} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.dss.TShirt.Style} value
 * @return {!proto.dss.TShirt} returns this
 */
proto.dss.TShirt.prototype.setStyle = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bool paid = 2;
 * @return {boolean}
 */
proto.dss.TShirt.prototype.getPaid = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.dss.TShirt} returns this
 */
proto.dss.TShirt.prototype.setPaid = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dss.ProvideHousing.prototype.toObject = function(opt_includeInstance) {
  return proto.dss.ProvideHousing.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dss.ProvideHousing} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dss.ProvideHousing.toObject = function(includeInstance, msg) {
  var f, obj = {
    pets: jspb.Message.getFieldWithDefault(msg, 1, ""),
    quantity: jspb.Message.getFieldWithDefault(msg, 2, 0),
    details: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dss.ProvideHousing}
 */
proto.dss.ProvideHousing.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dss.ProvideHousing;
  return proto.dss.ProvideHousing.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dss.ProvideHousing} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dss.ProvideHousing}
 */
proto.dss.ProvideHousing.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPets(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setQuantity(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDetails(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dss.ProvideHousing.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dss.ProvideHousing.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dss.ProvideHousing} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dss.ProvideHousing.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPets();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getQuantity();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getDetails();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string pets = 1;
 * @return {string}
 */
proto.dss.ProvideHousing.prototype.getPets = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.dss.ProvideHousing} returns this
 */
proto.dss.ProvideHousing.prototype.setPets = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 quantity = 2;
 * @return {number}
 */
proto.dss.ProvideHousing.prototype.getQuantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.dss.ProvideHousing} returns this
 */
proto.dss.ProvideHousing.prototype.setQuantity = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string details = 3;
 * @return {string}
 */
proto.dss.ProvideHousing.prototype.getDetails = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.dss.ProvideHousing} returns this
 */
proto.dss.ProvideHousing.prototype.setDetails = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dss.RequireHousing.prototype.toObject = function(opt_includeInstance) {
  return proto.dss.RequireHousing.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dss.RequireHousing} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dss.RequireHousing.toObject = function(includeInstance, msg) {
  var f, obj = {
    petAllergies: jspb.Message.getFieldWithDefault(msg, 1, ""),
    details: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dss.RequireHousing}
 */
proto.dss.RequireHousing.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dss.RequireHousing;
  return proto.dss.RequireHousing.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dss.RequireHousing} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dss.RequireHousing}
 */
proto.dss.RequireHousing.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPetAllergies(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDetails(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dss.RequireHousing.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dss.RequireHousing.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dss.RequireHousing} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dss.RequireHousing.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPetAllergies();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDetails();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string pet_allergies = 1;
 * @return {string}
 */
proto.dss.RequireHousing.prototype.getPetAllergies = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.dss.RequireHousing} returns this
 */
proto.dss.RequireHousing.prototype.setPetAllergies = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string details = 2;
 * @return {string}
 */
proto.dss.RequireHousing.prototype.getDetails = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.dss.RequireHousing} returns this
 */
proto.dss.RequireHousing.prototype.setDetails = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dss.NoHousing.prototype.toObject = function(opt_includeInstance) {
  return proto.dss.NoHousing.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dss.NoHousing} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dss.NoHousing.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dss.NoHousing}
 */
proto.dss.NoHousing.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dss.NoHousing;
  return proto.dss.NoHousing.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dss.NoHousing} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dss.NoHousing}
 */
proto.dss.NoHousing.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dss.NoHousing.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dss.NoHousing.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dss.NoHousing} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dss.NoHousing.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dss.RegistrationAddReq.prototype.toObject = function(opt_includeInstance) {
  return proto.dss.RegistrationAddReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dss.RegistrationAddReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dss.RegistrationAddReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    idempotencyKey: jspb.Message.getFieldWithDefault(msg, 1, ""),
    registration: (f = msg.getRegistration()) && proto.dss.RegistrationInfo.toObject(includeInstance, f),
    redirectUrl: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dss.RegistrationAddReq}
 */
proto.dss.RegistrationAddReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dss.RegistrationAddReq;
  return proto.dss.RegistrationAddReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dss.RegistrationAddReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dss.RegistrationAddReq}
 */
proto.dss.RegistrationAddReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdempotencyKey(value);
      break;
    case 2:
      var value = new proto.dss.RegistrationInfo;
      reader.readMessage(value,proto.dss.RegistrationInfo.deserializeBinaryFromReader);
      msg.setRegistration(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRedirectUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dss.RegistrationAddReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dss.RegistrationAddReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dss.RegistrationAddReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dss.RegistrationAddReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdempotencyKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRegistration();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.dss.RegistrationInfo.serializeBinaryToWriter
    );
  }
  f = message.getRedirectUrl();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string idempotency_key = 1;
 * @return {string}
 */
proto.dss.RegistrationAddReq.prototype.getIdempotencyKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.dss.RegistrationAddReq} returns this
 */
proto.dss.RegistrationAddReq.prototype.setIdempotencyKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional RegistrationInfo registration = 2;
 * @return {?proto.dss.RegistrationInfo}
 */
proto.dss.RegistrationAddReq.prototype.getRegistration = function() {
  return /** @type{?proto.dss.RegistrationInfo} */ (
    jspb.Message.getWrapperField(this, proto.dss.RegistrationInfo, 2));
};


/**
 * @param {?proto.dss.RegistrationInfo|undefined} value
 * @return {!proto.dss.RegistrationAddReq} returns this
*/
proto.dss.RegistrationAddReq.prototype.setRegistration = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dss.RegistrationAddReq} returns this
 */
proto.dss.RegistrationAddReq.prototype.clearRegistration = function() {
  return this.setRegistration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dss.RegistrationAddReq.prototype.hasRegistration = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string redirect_url = 3;
 * @return {string}
 */
proto.dss.RegistrationAddReq.prototype.getRedirectUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.dss.RegistrationAddReq} returns this
 */
proto.dss.RegistrationAddReq.prototype.setRedirectUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dss.RegistrationAddRes.prototype.toObject = function(opt_includeInstance) {
  return proto.dss.RegistrationAddRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dss.RegistrationAddRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dss.RegistrationAddRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    redirectUrl: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dss.RegistrationAddRes}
 */
proto.dss.RegistrationAddRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dss.RegistrationAddRes;
  return proto.dss.RegistrationAddRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dss.RegistrationAddRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dss.RegistrationAddRes}
 */
proto.dss.RegistrationAddRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRedirectUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dss.RegistrationAddRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dss.RegistrationAddRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dss.RegistrationAddRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dss.RegistrationAddRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRedirectUrl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string redirect_url = 1;
 * @return {string}
 */
proto.dss.RegistrationAddRes.prototype.getRedirectUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.dss.RegistrationAddRes} returns this
 */
proto.dss.RegistrationAddRes.prototype.setRedirectUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dss.RegistrationGetReq.prototype.toObject = function(opt_includeInstance) {
  return proto.dss.RegistrationGetReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dss.RegistrationGetReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dss.RegistrationGetReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dss.RegistrationGetReq}
 */
proto.dss.RegistrationGetReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dss.RegistrationGetReq;
  return proto.dss.RegistrationGetReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dss.RegistrationGetReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dss.RegistrationGetReq}
 */
proto.dss.RegistrationGetReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dss.RegistrationGetReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dss.RegistrationGetReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dss.RegistrationGetReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dss.RegistrationGetReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.dss.RegistrationGetReq.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.dss.RegistrationGetReq} returns this
 */
proto.dss.RegistrationGetReq.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dss.RegistrationGetRes.prototype.toObject = function(opt_includeInstance) {
  return proto.dss.RegistrationGetRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dss.RegistrationGetRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dss.RegistrationGetRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    registration: (f = msg.getRegistration()) && proto.dss.RegistrationInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dss.RegistrationGetRes}
 */
proto.dss.RegistrationGetRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dss.RegistrationGetRes;
  return proto.dss.RegistrationGetRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dss.RegistrationGetRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dss.RegistrationGetRes}
 */
proto.dss.RegistrationGetRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.dss.RegistrationInfo;
      reader.readMessage(value,proto.dss.RegistrationInfo.deserializeBinaryFromReader);
      msg.setRegistration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dss.RegistrationGetRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dss.RegistrationGetRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dss.RegistrationGetRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dss.RegistrationGetRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRegistration();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.dss.RegistrationInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional RegistrationInfo registration = 1;
 * @return {?proto.dss.RegistrationInfo}
 */
proto.dss.RegistrationGetRes.prototype.getRegistration = function() {
  return /** @type{?proto.dss.RegistrationInfo} */ (
    jspb.Message.getWrapperField(this, proto.dss.RegistrationInfo, 1));
};


/**
 * @param {?proto.dss.RegistrationInfo|undefined} value
 * @return {!proto.dss.RegistrationGetRes} returns this
*/
proto.dss.RegistrationGetRes.prototype.setRegistration = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dss.RegistrationGetRes} returns this
 */
proto.dss.RegistrationGetRes.prototype.clearRegistration = function() {
  return this.setRegistration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dss.RegistrationGetRes.prototype.hasRegistration = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dss.RegistrationPricesReq.prototype.toObject = function(opt_includeInstance) {
  return proto.dss.RegistrationPricesReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dss.RegistrationPricesReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dss.RegistrationPricesReq.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dss.RegistrationPricesReq}
 */
proto.dss.RegistrationPricesReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dss.RegistrationPricesReq;
  return proto.dss.RegistrationPricesReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dss.RegistrationPricesReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dss.RegistrationPricesReq}
 */
proto.dss.RegistrationPricesReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dss.RegistrationPricesReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dss.RegistrationPricesReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dss.RegistrationPricesReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dss.RegistrationPricesReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dss.RegistrationPricesRes.prototype.toObject = function(opt_includeInstance) {
  return proto.dss.RegistrationPricesRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dss.RegistrationPricesRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dss.RegistrationPricesRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    weekendPassCost: jspb.Message.getFieldWithDefault(msg, 1, 0),
    weekendPassTier: jspb.Message.getFieldWithDefault(msg, 2, 0),
    dancePassCost: jspb.Message.getFieldWithDefault(msg, 3, 0),
    mixAndMatchCost: jspb.Message.getFieldWithDefault(msg, 4, 0),
    soloJazzCost: jspb.Message.getFieldWithDefault(msg, 5, 0),
    teamCompetitionCost: jspb.Message.getFieldWithDefault(msg, 6, 0),
    tshirtCost: jspb.Message.getFieldWithDefault(msg, 7, 0),
    studentDiscount: (f = msg.getStudentDiscount()) && discount_pb.DiscountAmount.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dss.RegistrationPricesRes}
 */
proto.dss.RegistrationPricesRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dss.RegistrationPricesRes;
  return proto.dss.RegistrationPricesRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dss.RegistrationPricesRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dss.RegistrationPricesRes}
 */
proto.dss.RegistrationPricesRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setWeekendPassCost(value);
      break;
    case 2:
      var value = /** @type {!proto.dss.FullWeekendPassTier} */ (reader.readEnum());
      msg.setWeekendPassTier(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDancePassCost(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMixAndMatchCost(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSoloJazzCost(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTeamCompetitionCost(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTshirtCost(value);
      break;
    case 8:
      var value = new discount_pb.DiscountAmount;
      reader.readMessage(value,discount_pb.DiscountAmount.deserializeBinaryFromReader);
      msg.setStudentDiscount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dss.RegistrationPricesRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dss.RegistrationPricesRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dss.RegistrationPricesRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dss.RegistrationPricesRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWeekendPassCost();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getWeekendPassTier();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getDancePassCost();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getMixAndMatchCost();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getSoloJazzCost();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getTeamCompetitionCost();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getTshirtCost();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getStudentDiscount();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      discount_pb.DiscountAmount.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 weekend_pass_cost = 1;
 * @return {number}
 */
proto.dss.RegistrationPricesRes.prototype.getWeekendPassCost = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.dss.RegistrationPricesRes} returns this
 */
proto.dss.RegistrationPricesRes.prototype.setWeekendPassCost = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional FullWeekendPassTier weekend_pass_tier = 2;
 * @return {!proto.dss.FullWeekendPassTier}
 */
proto.dss.RegistrationPricesRes.prototype.getWeekendPassTier = function() {
  return /** @type {!proto.dss.FullWeekendPassTier} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.dss.FullWeekendPassTier} value
 * @return {!proto.dss.RegistrationPricesRes} returns this
 */
proto.dss.RegistrationPricesRes.prototype.setWeekendPassTier = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional int64 dance_pass_cost = 3;
 * @return {number}
 */
proto.dss.RegistrationPricesRes.prototype.getDancePassCost = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.dss.RegistrationPricesRes} returns this
 */
proto.dss.RegistrationPricesRes.prototype.setDancePassCost = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 mix_and_match_cost = 4;
 * @return {number}
 */
proto.dss.RegistrationPricesRes.prototype.getMixAndMatchCost = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.dss.RegistrationPricesRes} returns this
 */
proto.dss.RegistrationPricesRes.prototype.setMixAndMatchCost = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 solo_jazz_cost = 5;
 * @return {number}
 */
proto.dss.RegistrationPricesRes.prototype.getSoloJazzCost = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.dss.RegistrationPricesRes} returns this
 */
proto.dss.RegistrationPricesRes.prototype.setSoloJazzCost = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 team_competition_cost = 6;
 * @return {number}
 */
proto.dss.RegistrationPricesRes.prototype.getTeamCompetitionCost = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.dss.RegistrationPricesRes} returns this
 */
proto.dss.RegistrationPricesRes.prototype.setTeamCompetitionCost = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int64 tshirt_cost = 7;
 * @return {number}
 */
proto.dss.RegistrationPricesRes.prototype.getTshirtCost = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.dss.RegistrationPricesRes} returns this
 */
proto.dss.RegistrationPricesRes.prototype.setTshirtCost = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional DiscountAmount student_discount = 8;
 * @return {?proto.dss.DiscountAmount}
 */
proto.dss.RegistrationPricesRes.prototype.getStudentDiscount = function() {
  return /** @type{?proto.dss.DiscountAmount} */ (
    jspb.Message.getWrapperField(this, discount_pb.DiscountAmount, 8));
};


/**
 * @param {?proto.dss.DiscountAmount|undefined} value
 * @return {!proto.dss.RegistrationPricesRes} returns this
*/
proto.dss.RegistrationPricesRes.prototype.setStudentDiscount = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dss.RegistrationPricesRes} returns this
 */
proto.dss.RegistrationPricesRes.prototype.clearStudentDiscount = function() {
  return this.setStudentDiscount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dss.RegistrationPricesRes.prototype.hasStudentDiscount = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dss.RegistrationUpdateReq.prototype.toObject = function(opt_includeInstance) {
  return proto.dss.RegistrationUpdateReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dss.RegistrationUpdateReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dss.RegistrationUpdateReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    idempotencyKey: jspb.Message.getFieldWithDefault(msg, 1, ""),
    registration: (f = msg.getRegistration()) && proto.dss.RegistrationInfo.toObject(includeInstance, f),
    redirectUrl: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dss.RegistrationUpdateReq}
 */
proto.dss.RegistrationUpdateReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dss.RegistrationUpdateReq;
  return proto.dss.RegistrationUpdateReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dss.RegistrationUpdateReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dss.RegistrationUpdateReq}
 */
proto.dss.RegistrationUpdateReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdempotencyKey(value);
      break;
    case 2:
      var value = new proto.dss.RegistrationInfo;
      reader.readMessage(value,proto.dss.RegistrationInfo.deserializeBinaryFromReader);
      msg.setRegistration(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRedirectUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dss.RegistrationUpdateReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dss.RegistrationUpdateReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dss.RegistrationUpdateReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dss.RegistrationUpdateReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdempotencyKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRegistration();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.dss.RegistrationInfo.serializeBinaryToWriter
    );
  }
  f = message.getRedirectUrl();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string idempotency_key = 1;
 * @return {string}
 */
proto.dss.RegistrationUpdateReq.prototype.getIdempotencyKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.dss.RegistrationUpdateReq} returns this
 */
proto.dss.RegistrationUpdateReq.prototype.setIdempotencyKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional RegistrationInfo registration = 2;
 * @return {?proto.dss.RegistrationInfo}
 */
proto.dss.RegistrationUpdateReq.prototype.getRegistration = function() {
  return /** @type{?proto.dss.RegistrationInfo} */ (
    jspb.Message.getWrapperField(this, proto.dss.RegistrationInfo, 2));
};


/**
 * @param {?proto.dss.RegistrationInfo|undefined} value
 * @return {!proto.dss.RegistrationUpdateReq} returns this
*/
proto.dss.RegistrationUpdateReq.prototype.setRegistration = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dss.RegistrationUpdateReq} returns this
 */
proto.dss.RegistrationUpdateReq.prototype.clearRegistration = function() {
  return this.setRegistration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dss.RegistrationUpdateReq.prototype.hasRegistration = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string redirect_url = 3;
 * @return {string}
 */
proto.dss.RegistrationUpdateReq.prototype.getRedirectUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.dss.RegistrationUpdateReq} returns this
 */
proto.dss.RegistrationUpdateReq.prototype.setRedirectUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dss.RegistrationUpdateRes.prototype.toObject = function(opt_includeInstance) {
  return proto.dss.RegistrationUpdateRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dss.RegistrationUpdateRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dss.RegistrationUpdateRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    redirectUrl: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dss.RegistrationUpdateRes}
 */
proto.dss.RegistrationUpdateRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dss.RegistrationUpdateRes;
  return proto.dss.RegistrationUpdateRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dss.RegistrationUpdateRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dss.RegistrationUpdateRes}
 */
proto.dss.RegistrationUpdateRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRedirectUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dss.RegistrationUpdateRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dss.RegistrationUpdateRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dss.RegistrationUpdateRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dss.RegistrationUpdateRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRedirectUrl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string redirect_url = 1;
 * @return {string}
 */
proto.dss.RegistrationUpdateRes.prototype.getRedirectUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.dss.RegistrationUpdateRes} returns this
 */
proto.dss.RegistrationUpdateRes.prototype.setRedirectUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dss.RegistrationGetSummaryReq.prototype.toObject = function(opt_includeInstance) {
  return proto.dss.RegistrationGetSummaryReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dss.RegistrationGetSummaryReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dss.RegistrationGetSummaryReq.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dss.RegistrationGetSummaryReq}
 */
proto.dss.RegistrationGetSummaryReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dss.RegistrationGetSummaryReq;
  return proto.dss.RegistrationGetSummaryReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dss.RegistrationGetSummaryReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dss.RegistrationGetSummaryReq}
 */
proto.dss.RegistrationGetSummaryReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dss.RegistrationGetSummaryReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dss.RegistrationGetSummaryReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dss.RegistrationGetSummaryReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dss.RegistrationGetSummaryReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dss.RegistrationSummary.prototype.toObject = function(opt_includeInstance) {
  return proto.dss.RegistrationSummary.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dss.RegistrationSummary} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dss.RegistrationSummary.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    firstName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    lastName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    email: jspb.Message.getFieldWithDefault(msg, 4, ""),
    createdAt: jspb.Message.getFieldWithDefault(msg, 5, ""),
    paid: jspb.Message.getBooleanFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dss.RegistrationSummary}
 */
proto.dss.RegistrationSummary.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dss.RegistrationSummary;
  return proto.dss.RegistrationSummary.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dss.RegistrationSummary} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dss.RegistrationSummary}
 */
proto.dss.RegistrationSummary.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFirstName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreatedAt(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPaid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dss.RegistrationSummary.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dss.RegistrationSummary.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dss.RegistrationSummary} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dss.RegistrationSummary.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFirstName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLastName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCreatedAt();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getPaid();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.dss.RegistrationSummary.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.dss.RegistrationSummary} returns this
 */
proto.dss.RegistrationSummary.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string first_name = 2;
 * @return {string}
 */
proto.dss.RegistrationSummary.prototype.getFirstName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.dss.RegistrationSummary} returns this
 */
proto.dss.RegistrationSummary.prototype.setFirstName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string last_name = 3;
 * @return {string}
 */
proto.dss.RegistrationSummary.prototype.getLastName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.dss.RegistrationSummary} returns this
 */
proto.dss.RegistrationSummary.prototype.setLastName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string email = 4;
 * @return {string}
 */
proto.dss.RegistrationSummary.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.dss.RegistrationSummary} returns this
 */
proto.dss.RegistrationSummary.prototype.setEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string created_at = 5;
 * @return {string}
 */
proto.dss.RegistrationSummary.prototype.getCreatedAt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.dss.RegistrationSummary} returns this
 */
proto.dss.RegistrationSummary.prototype.setCreatedAt = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional bool paid = 6;
 * @return {boolean}
 */
proto.dss.RegistrationSummary.prototype.getPaid = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.dss.RegistrationSummary} returns this
 */
proto.dss.RegistrationSummary.prototype.setPaid = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.dss.RegistrationGetSummaryRes.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dss.RegistrationGetSummaryRes.prototype.toObject = function(opt_includeInstance) {
  return proto.dss.RegistrationGetSummaryRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dss.RegistrationGetSummaryRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dss.RegistrationGetSummaryRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    summariesList: jspb.Message.toObjectList(msg.getSummariesList(),
    proto.dss.RegistrationSummary.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dss.RegistrationGetSummaryRes}
 */
proto.dss.RegistrationGetSummaryRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dss.RegistrationGetSummaryRes;
  return proto.dss.RegistrationGetSummaryRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dss.RegistrationGetSummaryRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dss.RegistrationGetSummaryRes}
 */
proto.dss.RegistrationGetSummaryRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.dss.RegistrationSummary;
      reader.readMessage(value,proto.dss.RegistrationSummary.deserializeBinaryFromReader);
      msg.addSummaries(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dss.RegistrationGetSummaryRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dss.RegistrationGetSummaryRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dss.RegistrationGetSummaryRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dss.RegistrationGetSummaryRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSummariesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.dss.RegistrationSummary.serializeBinaryToWriter
    );
  }
};


/**
 * repeated RegistrationSummary summaries = 1;
 * @return {!Array<!proto.dss.RegistrationSummary>}
 */
proto.dss.RegistrationGetSummaryRes.prototype.getSummariesList = function() {
  return /** @type{!Array<!proto.dss.RegistrationSummary>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.dss.RegistrationSummary, 1));
};


/**
 * @param {!Array<!proto.dss.RegistrationSummary>} value
 * @return {!proto.dss.RegistrationGetSummaryRes} returns this
*/
proto.dss.RegistrationGetSummaryRes.prototype.setSummariesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.dss.RegistrationSummary=} opt_value
 * @param {number=} opt_index
 * @return {!proto.dss.RegistrationSummary}
 */
proto.dss.RegistrationGetSummaryRes.prototype.addSummaries = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.dss.RegistrationSummary, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.dss.RegistrationGetSummaryRes} returns this
 */
proto.dss.RegistrationGetSummaryRes.prototype.clearSummariesList = function() {
  return this.setSummariesList([]);
};


/**
 * @enum {number}
 */
proto.dss.FullWeekendPassTier = {
  TIER1: 0,
  TIER2: 1,
  TIER3: 2,
  TIER4: 3,
  TIER5: 4
};

/**
 * @enum {number}
 */
proto.dss.FullWeekendPassLevel = {
  LEVEL1: 0,
  LEVEL2: 1,
  LEVEL3: 2
};

goog.object.extend(exports, proto.dss);
