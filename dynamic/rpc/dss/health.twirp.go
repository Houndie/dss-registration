// Code generated by protoc-gen-twirp v5.10.2, DO NOT EDIT.
// source: health.proto

package dss

import bytes "bytes"
import strings "strings"
import context "context"
import fmt "fmt"
import ioutil "io/ioutil"
import http "net/http"
import strconv "strconv"

import jsonpb "github.com/golang/protobuf/jsonpb"
import proto "github.com/golang/protobuf/proto"
import twirp "github.com/twitchtv/twirp"
import ctxsetters "github.com/twitchtv/twirp/ctxsetters"

// ==============
// Info Interface
// ==============

type Info interface {
	Health(context.Context, *InfoHealthReq) (*InfoHealthRes, error)

	Version(context.Context, *InfoVersionReq) (*InfoVersionRes, error)
}

// ====================
// Info Protobuf Client
// ====================

type infoProtobufClient struct {
	client HTTPClient
	urls   [2]string
	opts   twirp.ClientOptions
}

// NewInfoProtobufClient creates a Protobuf client that implements the Info interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewInfoProtobufClient(addr string, client HTTPClient, opts ...twirp.ClientOption) Info {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	prefix := urlBase(addr) + InfoPathPrefix
	urls := [2]string{
		prefix + "Health",
		prefix + "Version",
	}

	return &infoProtobufClient{
		client: client,
		urls:   urls,
		opts:   clientOpts,
	}
}

func (c *infoProtobufClient) Health(ctx context.Context, in *InfoHealthReq) (*InfoHealthRes, error) {
	ctx = ctxsetters.WithPackageName(ctx, "dss")
	ctx = ctxsetters.WithServiceName(ctx, "Info")
	ctx = ctxsetters.WithMethodName(ctx, "Health")
	out := new(InfoHealthRes)
	err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *infoProtobufClient) Version(ctx context.Context, in *InfoVersionReq) (*InfoVersionRes, error) {
	ctx = ctxsetters.WithPackageName(ctx, "dss")
	ctx = ctxsetters.WithServiceName(ctx, "Info")
	ctx = ctxsetters.WithMethodName(ctx, "Version")
	out := new(InfoVersionRes)
	err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// ================
// Info JSON Client
// ================

type infoJSONClient struct {
	client HTTPClient
	urls   [2]string
	opts   twirp.ClientOptions
}

// NewInfoJSONClient creates a JSON client that implements the Info interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewInfoJSONClient(addr string, client HTTPClient, opts ...twirp.ClientOption) Info {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	prefix := urlBase(addr) + InfoPathPrefix
	urls := [2]string{
		prefix + "Health",
		prefix + "Version",
	}

	return &infoJSONClient{
		client: client,
		urls:   urls,
		opts:   clientOpts,
	}
}

func (c *infoJSONClient) Health(ctx context.Context, in *InfoHealthReq) (*InfoHealthRes, error) {
	ctx = ctxsetters.WithPackageName(ctx, "dss")
	ctx = ctxsetters.WithServiceName(ctx, "Info")
	ctx = ctxsetters.WithMethodName(ctx, "Health")
	out := new(InfoHealthRes)
	err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *infoJSONClient) Version(ctx context.Context, in *InfoVersionReq) (*InfoVersionRes, error) {
	ctx = ctxsetters.WithPackageName(ctx, "dss")
	ctx = ctxsetters.WithServiceName(ctx, "Info")
	ctx = ctxsetters.WithMethodName(ctx, "Version")
	out := new(InfoVersionRes)
	err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// ===================
// Info Server Handler
// ===================

type infoServer struct {
	Info
	hooks *twirp.ServerHooks
}

func NewInfoServer(svc Info, hooks *twirp.ServerHooks) TwirpServer {
	return &infoServer{
		Info:  svc,
		hooks: hooks,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *infoServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// InfoPathPrefix is used for all URL paths on a twirp Info server.
// Requests are always: POST InfoPathPrefix/method
// It can be used in an HTTP mux to route twirp requests along with non-twirp requests on other routes.
const InfoPathPrefix = "/twirp/dss.Info/"

func (s *infoServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "dss")
	ctx = ctxsetters.WithServiceName(ctx, "Info")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}

	switch req.URL.Path {
	case "/twirp/dss.Info/Health":
		s.serveHealth(ctx, resp, req)
		return
	case "/twirp/dss.Info/Version":
		s.serveVersion(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}
}

func (s *infoServer) serveHealth(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveHealthJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveHealthProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *infoServer) serveHealthJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Health")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(InfoHealthReq)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *InfoHealthRes
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.Info.Health(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *InfoHealthRes and nil error while calling Health. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *infoServer) serveHealthProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Health")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(InfoHealthReq)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *InfoHealthRes
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.Info.Health(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *InfoHealthRes and nil error while calling Health. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *infoServer) serveVersion(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveVersionJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveVersionProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *infoServer) serveVersionJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Version")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(InfoVersionReq)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *InfoVersionRes
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.Info.Version(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *InfoVersionRes and nil error while calling Version. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *infoServer) serveVersionProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Version")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(InfoVersionReq)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *InfoVersionRes
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.Info.Version(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *InfoVersionRes and nil error while calling Version. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *infoServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor3, 0
}

func (s *infoServer) ProtocGenTwirpVersion() string {
	return "v5.10.2"
}

func (s *infoServer) PathPrefix() string {
	return InfoPathPrefix
}

var twirpFileDescriptor3 = []byte{
	// 218 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xc9, 0x48, 0x4d, 0xcc,
	0x29, 0xc9, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4e, 0x29, 0x2e, 0x56, 0xe2, 0xe7,
	0xe2, 0xf5, 0xcc, 0x4b, 0xcb, 0xf7, 0x00, 0x4b, 0x04, 0xa5, 0x16, 0x2a, 0x75, 0x32, 0xa2, 0x8a,
	0x14, 0x0b, 0x39, 0x70, 0x71, 0x43, 0xf4, 0x65, 0xe6, 0xa5, 0x16, 0x17, 0x4b, 0x30, 0x2a, 0x30,
	0x6a, 0xf0, 0x19, 0xc9, 0xe9, 0xa5, 0x14, 0x17, 0xeb, 0xa1, 0x28, 0xd4, 0xf3, 0x40, 0xa8, 0x0a,
	0x42, 0xd6, 0xa2, 0x64, 0xc6, 0xc5, 0x8d, 0x24, 0x27, 0xc4, 0xcd, 0xc5, 0x1e, 0x9a, 0x97, 0x9d,
	0x97, 0x5f, 0x9e, 0x27, 0xc0, 0x00, 0xe2, 0x40, 0xe4, 0x2a, 0x05, 0x18, 0x85, 0x78, 0xb9, 0x38,
	0x43, 0xf3, 0x32, 0xa0, 0x5c, 0x26, 0x25, 0x01, 0x2e, 0x3e, 0x90, 0x0d, 0x61, 0xa9, 0x45, 0xc5,
	0x99, 0xf9, 0x79, 0x20, 0xd7, 0x69, 0xa1, 0x89, 0x14, 0x0b, 0x49, 0x70, 0xb1, 0x97, 0x41, 0x78,
	0x60, 0x97, 0x71, 0x06, 0xc1, 0xb8, 0x46, 0xb9, 0x5c, 0x2c, 0x20, 0xb5, 0x42, 0x06, 0x5c, 0x6c,
	0x10, 0x1b, 0x84, 0x84, 0x30, 0x1c, 0x5d, 0x28, 0x85, 0x29, 0x56, 0x2c, 0x64, 0xcc, 0xc5, 0x0e,
	0xb5, 0x41, 0x48, 0x18, 0x2e, 0x8d, 0x70, 0x85, 0x14, 0x16, 0xc1, 0x62, 0x27, 0xce, 0x28, 0xf6,
	0xa2, 0x82, 0x64, 0xfd, 0x94, 0xe2, 0xe2, 0x24, 0x36, 0x70, 0x00, 0x1b, 0x03, 0x02, 0x00, 0x00,
	0xff, 0xff, 0x80, 0xbf, 0xf6, 0x4a, 0x70, 0x01, 0x00, 0x00,
}
