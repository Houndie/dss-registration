// Code generated by protoc-gen-twirp v5.10.2, DO NOT EDIT.
// source: discount.proto

package dss

import bytes "bytes"
import strings "strings"
import context "context"
import fmt "fmt"
import ioutil "io/ioutil"
import http "net/http"
import strconv "strconv"

import jsonpb "github.com/golang/protobuf/jsonpb"
import proto "github.com/golang/protobuf/proto"
import twirp "github.com/twitchtv/twirp"
import ctxsetters "github.com/twitchtv/twirp/ctxsetters"

// ==================
// Discount Interface
// ==================

type Discount interface {
	Add(context.Context, *DiscountAddReq) (*DiscountAddRes, error)

	Get(context.Context, *DiscountGetReq) (*DiscountGetRes, error)

	List(context.Context, *DiscountListReq) (*DiscountListRes, error)
}

// ========================
// Discount Protobuf Client
// ========================

type discountProtobufClient struct {
	client HTTPClient
	urls   [3]string
	opts   twirp.ClientOptions
}

// NewDiscountProtobufClient creates a Protobuf client that implements the Discount interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewDiscountProtobufClient(addr string, client HTTPClient, opts ...twirp.ClientOption) Discount {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	prefix := urlBase(addr) + DiscountPathPrefix
	urls := [3]string{
		prefix + "Add",
		prefix + "Get",
		prefix + "List",
	}

	return &discountProtobufClient{
		client: client,
		urls:   urls,
		opts:   clientOpts,
	}
}

func (c *discountProtobufClient) Add(ctx context.Context, in *DiscountAddReq) (*DiscountAddRes, error) {
	ctx = ctxsetters.WithPackageName(ctx, "dss")
	ctx = ctxsetters.WithServiceName(ctx, "Discount")
	ctx = ctxsetters.WithMethodName(ctx, "Add")
	out := new(DiscountAddRes)
	err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *discountProtobufClient) Get(ctx context.Context, in *DiscountGetReq) (*DiscountGetRes, error) {
	ctx = ctxsetters.WithPackageName(ctx, "dss")
	ctx = ctxsetters.WithServiceName(ctx, "Discount")
	ctx = ctxsetters.WithMethodName(ctx, "Get")
	out := new(DiscountGetRes)
	err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *discountProtobufClient) List(ctx context.Context, in *DiscountListReq) (*DiscountListRes, error) {
	ctx = ctxsetters.WithPackageName(ctx, "dss")
	ctx = ctxsetters.WithServiceName(ctx, "Discount")
	ctx = ctxsetters.WithMethodName(ctx, "List")
	out := new(DiscountListRes)
	err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[2], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// ====================
// Discount JSON Client
// ====================

type discountJSONClient struct {
	client HTTPClient
	urls   [3]string
	opts   twirp.ClientOptions
}

// NewDiscountJSONClient creates a JSON client that implements the Discount interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewDiscountJSONClient(addr string, client HTTPClient, opts ...twirp.ClientOption) Discount {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	prefix := urlBase(addr) + DiscountPathPrefix
	urls := [3]string{
		prefix + "Add",
		prefix + "Get",
		prefix + "List",
	}

	return &discountJSONClient{
		client: client,
		urls:   urls,
		opts:   clientOpts,
	}
}

func (c *discountJSONClient) Add(ctx context.Context, in *DiscountAddReq) (*DiscountAddRes, error) {
	ctx = ctxsetters.WithPackageName(ctx, "dss")
	ctx = ctxsetters.WithServiceName(ctx, "Discount")
	ctx = ctxsetters.WithMethodName(ctx, "Add")
	out := new(DiscountAddRes)
	err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *discountJSONClient) Get(ctx context.Context, in *DiscountGetReq) (*DiscountGetRes, error) {
	ctx = ctxsetters.WithPackageName(ctx, "dss")
	ctx = ctxsetters.WithServiceName(ctx, "Discount")
	ctx = ctxsetters.WithMethodName(ctx, "Get")
	out := new(DiscountGetRes)
	err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *discountJSONClient) List(ctx context.Context, in *DiscountListReq) (*DiscountListRes, error) {
	ctx = ctxsetters.WithPackageName(ctx, "dss")
	ctx = ctxsetters.WithServiceName(ctx, "Discount")
	ctx = ctxsetters.WithMethodName(ctx, "List")
	out := new(DiscountListRes)
	err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[2], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// =======================
// Discount Server Handler
// =======================

type discountServer struct {
	Discount
	hooks *twirp.ServerHooks
}

func NewDiscountServer(svc Discount, hooks *twirp.ServerHooks) TwirpServer {
	return &discountServer{
		Discount: svc,
		hooks:    hooks,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *discountServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// DiscountPathPrefix is used for all URL paths on a twirp Discount server.
// Requests are always: POST DiscountPathPrefix/method
// It can be used in an HTTP mux to route twirp requests along with non-twirp requests on other routes.
const DiscountPathPrefix = "/twirp/dss.Discount/"

func (s *discountServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "dss")
	ctx = ctxsetters.WithServiceName(ctx, "Discount")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}

	switch req.URL.Path {
	case "/twirp/dss.Discount/Add":
		s.serveAdd(ctx, resp, req)
		return
	case "/twirp/dss.Discount/Get":
		s.serveGet(ctx, resp, req)
		return
	case "/twirp/dss.Discount/List":
		s.serveList(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}
}

func (s *discountServer) serveAdd(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveAddJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveAddProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *discountServer) serveAddJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Add")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(DiscountAddReq)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *DiscountAddRes
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.Discount.Add(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *DiscountAddRes and nil error while calling Add. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *discountServer) serveAddProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Add")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(DiscountAddReq)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *DiscountAddRes
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.Discount.Add(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *DiscountAddRes and nil error while calling Add. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *discountServer) serveGet(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *discountServer) serveGetJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Get")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(DiscountGetReq)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *DiscountGetRes
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.Discount.Get(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *DiscountGetRes and nil error while calling Get. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *discountServer) serveGetProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Get")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(DiscountGetReq)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *DiscountGetRes
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.Discount.Get(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *DiscountGetRes and nil error while calling Get. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *discountServer) serveList(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveListJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveListProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *discountServer) serveListJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "List")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(DiscountListReq)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *DiscountListRes
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.Discount.List(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *DiscountListRes and nil error while calling List. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *discountServer) serveListProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "List")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(DiscountListReq)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *DiscountListRes
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.Discount.List(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *DiscountListRes and nil error while calling List. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *discountServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor1, 0
}

func (s *discountServer) ProtocGenTwirpVersion() string {
	return "v5.10.2"
}

func (s *discountServer) PathPrefix() string {
	return DiscountPathPrefix
}

var twirpFileDescriptor1 = []byte{
	// 327 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0xcf, 0x4b, 0xfb, 0x30,
	0x14, 0x5f, 0xd6, 0xb1, 0xad, 0xef, 0x0b, 0xfb, 0x6a, 0xf4, 0x10, 0x7a, 0x2a, 0xc1, 0xc3, 0x40,
	0xdc, 0x70, 0x9e, 0x05, 0x37, 0x84, 0xed, 0xe0, 0x41, 0xe3, 0x41, 0xf0, 0xb6, 0x35, 0x41, 0x06,
	0x5d, 0x5b, 0xfb, 0xba, 0xff, 0xc7, 0x3f, 0x55, 0x92, 0x36, 0xfd, 0x11, 0x7a, 0xf1, 0x32, 0xb2,
	0x4f, 0x3e, 0xbf, 0xde, 0x4b, 0x61, 0x26, 0x8f, 0x18, 0xa5, 0xe7, 0xa4, 0x58, 0x64, 0x79, 0x5a,
	0xa4, 0xd4, 0x93, 0x88, 0xfc, 0x15, 0x66, 0xcf, 0x15, 0xbc, 0x3e, 0xe9, 0x5f, 0xca, 0x60, 0x2c,
	0xd3, 0x38, 0xde, 0xe7, 0x6c, 0x1a, 0x92, 0xb9, 0xb7, 0x1b, 0x88, 0xea, 0x3f, 0x0d, 0x60, 0x92,
	0xa9, 0x3c, 0x52, 0x49, 0xc1, 0xfc, 0x90, 0xcc, 0xfd, 0xdd, 0x40, 0x58, 0x60, 0x33, 0x85, 0xf1,
	0xde, 0xe8, 0xf9, 0x1b, 0xcc, 0xde, 0x8f, 0xc9, 0x57, 0xac, 0xac, 0x2f, 0xa5, 0x30, 0x4a, 0xf6,
	0x27, 0xc5, 0x88, 0x16, 0x09, 0x73, 0xa6, 0xb7, 0x96, 0xcf, 0x86, 0x21, 0x99, 0xff, 0x5b, 0x5d,
	0x2d, 0x24, 0xe2, 0xa2, 0x5b, 0x45, 0x58, 0xcb, 0x8f, 0xa6, 0xe4, 0xe6, 0x9c, 0xc8, 0x58, 0x69,
	0xcb, 0x28, 0x95, 0xb5, 0xa5, 0x3e, 0xd3, 0x7b, 0xf0, 0xed, 0x84, 0xc8, 0x86, 0xa1, 0x57, 0xbb,
	0x76, 0xeb, 0x88, 0x86, 0xc5, 0x1f, 0x5b, 0xd3, 0x4b, 0x29, 0xd4, 0xb7, 0xee, 0x75, 0x30, 0x11,
	0xc6, 0xda, 0xed, 0x55, 0xa6, 0x8b, 0x8a, 0xc2, 0x2f, 0x1c, 0x39, 0xf2, 0x9b, 0x06, 0xd9, 0xaa,
	0x42, 0x1b, 0xf6, 0x34, 0x6d, 0xc7, 0x1a, 0x16, 0xfe, 0x2d, 0xf6, 0x12, 0xfe, 0xdb, 0x9b, 0x97,
	0x23, 0xea, 0x14, 0xfe, 0xe4, 0x42, 0x48, 0xef, 0x60, 0x52, 0xf2, 0x91, 0x91, 0xd6, 0x32, 0x1c,
	0x4f, 0xcb, 0x59, 0xfd, 0x10, 0x98, 0xd6, 0x2f, 0xb6, 0x04, 0x6f, 0x2d, 0x25, 0x75, 0x1e, 0xc5,
	0x6c, 0x28, 0xe8, 0x01, 0x51, 0x0b, 0xb6, 0xaa, 0x70, 0x04, 0xe5, 0x06, 0x82, 0x1e, 0x10, 0xe9,
	0x0a, 0x46, 0xba, 0x28, 0xbd, 0xee, 0x5c, 0x56, 0xe3, 0x04, 0x7d, 0x28, 0x6e, 0xfc, 0xcf, 0x49,
	0x9e, 0x45, 0x4b, 0x89, 0x78, 0x18, 0x9b, 0x4f, 0xf8, 0xe1, 0x37, 0x00, 0x00, 0xff, 0xff, 0x2c,
	0xc3, 0xae, 0xb4, 0xd4, 0x02, 0x00, 0x00,
}
